/*소스: SimpleC9++.cpp
  cout과 << 연산자를 이용하여 화면에 출력한다. */

#include <iostream> //cout과 <<연산자 포함

//C++ 프로그램은 main() 함수에서 부터 실행을 시작한다.
int main()
{
	std::cout << "Hello\n";				//화면에 Hello를 출력하고 다음 줄로 넘어감
	std::cout << "첫 번째 맛보기입니다.\n"; 

	int n = 3;
	char c = '#';
	std::cout << c << 5.5 << '-' << n << "hello" << true << '\n';
	return 0;				//main() 함수가 종료하면 프로그램이 종료됨
}
/*
main함수가 return한 정수값은 누구에게 전달되는가?
부모 프로그램은 자식 프로그램의 main()함수에서 리턴한 정수 값을 알아내는 함수를 통해,
자식프로그램의 ㅈ오료 상태를 알게된다. 이를 위해서 프로그램 설계 단계에서 return하는
정수 값의 의미를 정한다.
개발자가 응용프로그램을 보모 자식으로 나누어 작성하지 않는 경우 모든 프로그램은
부모 운영체제이며, 운영체제와 응용프로그램 사이에 특별한 종료 관계가
설정되어 있지 않기 때문에, 응용프로그램이 0이 아닌 다른 정수를 리턴 한다고 해도
아무 의미가 없다.
*/


/*
cout 객체
cout은 스크림 장치와 연결된 c++ 표준 스트림 객체이다.

<<연산자
스트림 삽입 연산자로 불린다.
오른쪽 피 연산자 데이터를 왼쪽 스트림 객체에 삽입한다.
원래 정수를 왼쪽으로 shift하는 기본 연산자이다. 그러나 출력 스트림에 데이터를 삽입하는
삽입 연산자로 헤더파일에 재정의되어 cout과 함께 사용한다.

여러개의 <<연산자 하나로 문장에 데이터를 출력할 수 있다.
왼쪽에서 오른쪽 순으로 실행된다. 문자열 뿐만이 아니라, 기본 타입 데이터도 출력할 수 있다.

화면에서 다음 줄로 넘기기 \n
*/


/*
<참고>
std::cout << '\n'; 문장은 <<연산자가 \n 문자를 cout 스틀미 버퍼에 단순 삽입하고 끝난다.
그 후 cout 스트림버퍼가 꽉 차거나 강제출력 지시자가 있는 경우,
cout은 \n을 해석하여 커서를 다음줄로 넘긴다.
한편, endl은 헤더파일에 작성되어 있는 함수이다.
이것이 실행되면 <<연산자가 endl함수를 호출한다.
endl함수는 \n을 cout의 스트림버퍼에 넣고 cout에게 현재 스트림 버퍼에 있는 데이터를
즉각 장치에 출력하도록 지시한다.
endl를 사용하면 커서를 다음줄로 넘기는 것과 동시에 cout의 스트림 버퍼에 있는
모든 데이터를 출력시킨다.
*/


/*
이름 공간이란?
프로젝트 진행에 있어서 발생할 수 있는 이름 충돌을 막을 목적으로 존재하는 것이 이름공간이다.
존재하는 이름공간이 다르면 동일한 이름의 함수 및 변수를 선언하는것이 간으하다.
::는 범위지정연산자
std:: 표준이름공간
using지시어 std::생략 가능.
*/


//char name4[] = "Grace";
/*배열의 크기가 6으로 자동으로 설정된다.
마지막에 널 문자를 추가하기 위해서 문자 수보다 최소한 1은 커야하며,
문자수보다 많이커도 상관은 없다.
배열 사이즈를 많이 주었을 경우, 문자열 뒤에 남는 원소들을 널(\0) 문자로 초기화된다.

C-string을 다루기 위해 include <cstring>이나 include <string.h>를 추가해여한다.
<cstring> 헤더파일은 내부적으로 <stdio.h>헤더파일을 include하고 있기 때문에
거의 같은 것으로 볼 수 있지만,
c++표준에 따라서 cstring 헤더파일을 include 하는 것이 바람직하다.
또, <iostream>만 include 해도 strcpy(), strcmp(), strlen() 등의 함수를 사용할 수 있지만,
리눅스 컴파일러 등 다른 컴파일러에서는 안될수 있으므로 c++표준을 지키는 것이 좋다.
*/


/*
strlen(apple) => (문자열 길이반환) 5값이 반환
strcpy(a, b) => b의 문자열을 a로 복사한다.
strcmp(a, b) => a와 b를 비교한다. 동일하면 0, a가 크면 1, b가 크면 -1
*/


/*
cin.getline(char buf[], int size, char delimitChar)
char buf[] : 키보드로 부터 읽은 문자열을 저장할 배열
int size : buf[] 배열의 크기
char delimitChar : 문자열 입력 끝을 지정하는 구분 문자

cin.getline 함수의 마지막 매개변수  delimitChar는 생략가능하다.
디폴트값이 \n이므로, cin.getline(address, 100); 으로 작성가능
*/


/*
<참고>
공백문자(white space character)란?
공백 문자란 단어나 줄 사이에 사용자가 읽기쉽도록 삽입하는 문자로서,
C++표준에서는 빈칸(' '), 탭('\t'), 개행('\n'), 캐리지리턴('\r'),
폼피드('\f\), 수직탭('\v') 문자들을 말한다.
문자가 공백문자인지 판단하기 위해 이용하는
함수 int isspace(char c)
					  c 가 공백문자이면 true(0이 아닌 정수) return
*/


/*
string class 이용방식
c-string 방식은 배열의 크기에 의해 문자열의 크기가 고정되는
불편함이 있다.
string 방식은 문자열 크기의 제약이 없기 때문에
문자열을 다루기 쉽다.
*/